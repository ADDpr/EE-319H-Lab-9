


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: Alex Koo, Anthony Do
    3 00000000         ; Last modification date: 4/1
    4 00000000         ; Runs on TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; SSD1306_OutChar   outputs a single 8-bit ASCII charact
                       er
   10 00000000         ; SSD1306_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           SSD1306_OutChar
   13 00000000                 IMPORT           SSD1306_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000                 PRESERVE8
   17 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   18 00000000                 THUMB
   19 00000000         
   20 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   21 00000000         ; Output a 32-bit number in unsigned decimal format
   22 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   23 00000000         ; Output: none
   24 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   25 00000000 00000004 
                       N       EQU              4
   26 00000000 00000008 
                       M       EQU              8
   27 00000000 00000000 
                       CNT     EQU              0
   28 00000000        B 
                       FP      RN               11
   29 00000000         
   30 00000000         LCD_OutDec
   31 00000000         
   32 00000000 B500            PUSH{LR}
   33 00000002         
   34 00000002         ; Checks if R0 is zero, if not then call function again
   35 00000002 280A            CMP              R0, #10
   36 00000004 D315            BLO              OutDec_Output
   37 00000006         
   38 00000006 B082            ADD              SP, SP, #-M
   39 00000008 9000            STR              R0, [SP, #CNT]
   40 0000000A         ;equivalent to PUSH{R0}
   41 0000000A         
   42 0000000A         ; R1 = 10 for division
   43 0000000A F04F 010A       MOV              R1, #10
   44 0000000E         
   45 0000000E         ; Divides R0 by 10
   46 0000000E FBB0 F0F1       UDIV             R0, R1
   47 00000012         
   48 00000012         
   49 00000012 F7FF FFFE       BL               LCD_OutDec
   50 00000016         



ARM Macro Assembler    Page 2 


   51 00000016         ;(1 / 10) % 10 = 0
   52 00000016         
   53 00000016 B002            ADD              SP, SP, #M
   54 00000018 F85D 0C08       LDR              R0, [SP, #-M]
   55 0000001C         ;POP{R0}
   56 0000001C         
   57 0000001C         ; Makes two copies of R0
   58 0000001C         ; R2 gets divided, R3 remains same
   59 0000001C 4602            MOV              R2, R0
   60 0000001E 4603            MOV              R3, R0
   61 00000020         
   62 00000020         ; R1 = 10 for division
   63 00000020 F04F 010A       MOV              R1, #10
   64 00000024         
   65 00000024         ; Multiples R2 by 10
   66 00000024 FBB2 F2F1       UDIV             R2, R1
   67 00000028 FB02 F201       MUL              R2, R1
   68 0000002C         ; Subtracts R2 from R3, stores in R2
   69 0000002C EBA3 0202       SUB              R2, R3, R2
   70 00000030         
   71 00000030         ; 655 = R2
   72 00000030         ; 655 / 10
   73 00000030         ; 65 = R3
   74 00000030         
   75 00000030         ; 65 * 10 -> R3 = 650
   76 00000030         ; R2 - R3 = 5
   77 00000030         
   78 00000030         ; After all function calls, print chars to screen
   79 00000030 4610            MOV              R0, R2
   80 00000032         OutDec_Output
   81 00000032         ; Converts R0 to ASCII
   82 00000032         
   83 00000032         ;PUSH{R2}
   84 00000032 F100 0030       ADD              R0, #0x30
   85 00000036 F7FF FFFE       BL               SSD1306_OutChar
   86 0000003A         
   87 0000003A F85D EB04       POP{LR}
   88 0000003E         
   89 0000003E         
   90 0000003E 4770            BX               LR
   91 00000040         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   92 00000040         
   93 00000040         ; -----------------------LCD _OutFix--------------------
                       --
   94 00000040         ; Output characters to LCD display in fixed-point format
                       
   95 00000040         ; unsigned decimal, resolution 0.01, range 0.00 to 9.99
   96 00000040         ; Inputs:  R0 is an unsigned 32-bit number
   97 00000040         ; Outputs: none
   98 00000040         ; E.g., R0=0,    then output "0.00 "
   99 00000040         ;       R0=3,    then output "0.03 "
  100 00000040         ;       R0=89,   then output "0.89 "
  101 00000040         ;       R0=123,  then output "1.23 "
  102 00000040         ;       R0=999,  then output "9.99 "
  103 00000040         ;       R0>999,  then output "*.** "
  104 00000040         ; Invariables: This function must not permanently modify
                        registers R4 to R11
  105 00000040         LCD_OutFix
  106 00000040         



ARM Macro Assembler    Page 3 


  107 00000040         
  108 00000040         ; Allocation Phase
  109 00000040 F84D BD04       PUSH{R11}
  110 00000044 9000            STR              R0, [SP, #0]
  111 00000046 B081            SUB              SP, #4
  112 00000048 46EB            MOV              FP, SP
  113 0000004A B500            PUSH{LR}
  114 0000004C         
  115 0000004C         ; Store CNT as zero
  116 0000004C F04F 0000       MOV              R0, #0
  117 00000050 F8CB 0000       STR              R0, [FP, #CNT]
  118 00000054         
  119 00000054         ; Loads 10 into register for division
  120 00000054 F04F 010A       MOV              R1, #10
  121 00000058         
  122 00000058         ; Checks if N is less than 1000
  123 00000058 F8DB 0004       LDR              R0, [FP, #N]
  124 0000005C F5B0 7F7A       CMP              R0, #1000
  125 00000060 D310            BLO              In_Range
  126 00000062         
  127 00000062         ; If N > 1000 print *.**
  128 00000062 F04F 002A       MOV              R0, #0x2A
  129 00000066 F7FF FFFE       BL               SSD1306_OutChar
  130 0000006A F04F 002E       MOV              R0, #0x2E
  131 0000006E F7FF FFFE       BL               SSD1306_OutChar
  132 00000072 F04F 002A       MOV              R0, #0x2A
  133 00000076 F7FF FFFE       BL               SSD1306_OutChar
  134 0000007A F04F 002A       MOV              R0, #0x2A
  135 0000007E F7FF FFFE       BL               SSD1306_OutChar
  136 00000082 E032            B                OutFix_End
  137 00000084         
  138 00000084         In_Range
  139 00000084         
  140 00000084         ; Loads count and adds '1', stores it back
  141 00000084 F8DB 0000       LDR              R0, [FP, #CNT]
  142 00000088 F100 0001       ADD              R0, #1
  143 0000008C F8CB 0000       STR              R0, [FP, #CNT]
  144 00000090         
  145 00000090         ; Load two copies of 'input'
  146 00000090 F8DB 2004       LDR              R2, [FP, #N]
  147 00000094 F8DB 3004       LDR              R3, [FP, #N]
  148 00000098         
  149 00000098         ; Gets the 1's place of the current input
  150 00000098 FBB2 F2F1       UDIV             R2, R1
  151 0000009C         ; Stores the cut-off value back into 'N'
  152 0000009C F8CB 2004       STR              R2, [FP, #N]
  153 000000A0 FB02 F201       MUL              R2, R2, R1
  154 000000A4 EBA3 0202       SUB              R2, R3, R2
  155 000000A8         
  156 000000A8         ; Stores value onto the stack
  157 000000A8 B404            PUSH{R2}
  158 000000AA         
  159 000000AA         ; Check if CNT is less than 3
  160 000000AA F8DB 2000       LDR              R2, [FP, #CNT]
  161 000000AE 2A03            CMP              R2, #3
  162 000000B0 D3E8            BLO              In_Range
  163 000000B2         
  164 000000B2         
  165 000000B2         ; Pops top value into R2 and adds 0x30 to convert to ASC



ARM Macro Assembler    Page 4 


                       II
  166 000000B2 BC04            POP{R2}
  167 000000B4 F000 0000       AND              R0, R0, #0
  168 000000B8 4410            ADD              R0, R2
  169 000000BA F100 0030       ADD              R0, #0x30
  170 000000BE         ; Outputs the current character to the screen
  171 000000BE F7FF FFFE       BL               SSD1306_OutChar
  172 000000C2         
  173 000000C2         ; Prints a period to the screen
  174 000000C2 F04F 002E       MOV              R0, #0x2E
  175 000000C6 F7FF FFFE       BL               SSD1306_OutChar
  176 000000CA         
  177 000000CA         ; Pops top value into R2 and adds 0x30 to convert to ASC
                       II
  178 000000CA BC04            POP{R2}
  179 000000CC F000 0000       AND              R0, R0, #0
  180 000000D0 4410            ADD              R0, R2
  181 000000D2 F100 0030       ADD              R0, #0x30
  182 000000D6         ; Outputs the current character to the screen
  183 000000D6 F7FF FFFE       BL               SSD1306_OutChar
  184 000000DA         
  185 000000DA         ; Pops top value into R2 and adds 0x30 to convert to ASC
                       II
  186 000000DA BC04            POP{R2}
  187 000000DC F000 0000       AND              R0, R0, #0
  188 000000E0 4410            ADD              R0, R2
  189 000000E2 F100 0030       ADD              R0, #0x30
  190 000000E6         ; Outputs the current character to the screen
  191 000000E6 F7FF FFFE       BL               SSD1306_OutChar
  192 000000EA         
  193 000000EA         OutFix_End
  194 000000EA         
  195 000000EA F85D EB04       POP{LR}
  196 000000EE B002            ADD              SP, #8
  197 000000F0 F85D BB04       POP{R11}
  198 000000F4         
  199 000000F4 4770            BX               LR
  200 000000F6         
  201 000000F6 00 00           ALIGN
  202 000000F8         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  203 000000F8         
  204 000000F8                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  205 000000F8                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\print.d -o.\print.o -I.\RTE\_Lab_9 -IC:\Users\adois\AppData\Loca
l\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\adois\AppData\Local\A
rm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1"
 --predefine="__UVISION_VERSION SETA 533" --predefine="_RTE_ SETA 1" --predefin
e="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\print.lst print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 17 in file print.s
   Uses
      None
Comment: .text unused
In_Range 00000084

Symbol: In_Range
   Definitions
      At line 138 in file print.s
   Uses
      At line 125 in file print.s
      At line 162 in file print.s

LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 30 in file print.s
   Uses
      At line 14 in file print.s
      At line 49 in file print.s

LCD_OutFix 00000040

Symbol: LCD_OutFix
   Definitions
      At line 105 in file print.s
   Uses
      At line 15 in file print.s
Comment: LCD_OutFix used once
OutDec_Output 00000032

Symbol: OutDec_Output
   Definitions
      At line 80 in file print.s
   Uses
      At line 36 in file print.s
Comment: OutDec_Output used once
OutFix_End 000000EA

Symbol: OutFix_End
   Definitions
      At line 193 in file print.s
   Uses
      At line 136 in file print.s
Comment: OutFix_End used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CNT 00000000

Symbol: CNT
   Definitions
      At line 27 in file print.s
   Uses
      At line 39 in file print.s
      At line 117 in file print.s
      At line 141 in file print.s
      At line 143 in file print.s
      At line 160 in file print.s

M 00000008

Symbol: M
   Definitions
      At line 26 in file print.s
   Uses
      At line 38 in file print.s
      At line 53 in file print.s
      At line 54 in file print.s

N 00000004

Symbol: N
   Definitions
      At line 25 in file print.s
   Uses
      At line 123 in file print.s
      At line 146 in file print.s
      At line 147 in file print.s
      At line 152 in file print.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SSD1306_OutChar 00000000

Symbol: SSD1306_OutChar
   Definitions
      At line 12 in file print.s
   Uses
      At line 85 in file print.s
      At line 129 in file print.s
      At line 131 in file print.s
      At line 133 in file print.s
      At line 135 in file print.s
      At line 171 in file print.s
      At line 175 in file print.s
      At line 183 in file print.s
      At line 191 in file print.s

SSD1306_OutString 00000000

Symbol: SSD1306_OutString
   Definitions
      At line 13 in file print.s
   Uses
      None
Comment: SSD1306_OutString unused
2 symbols
345 symbols in table
